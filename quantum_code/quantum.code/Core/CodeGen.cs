// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109

namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  public enum ControllerType : int {
    Platformer3D,
    Platformer2D,
  }
  public enum InputType : int {
    GROUND_IDLE,
    AIR_IDLE,
    WALK,
    MID_DASH,
    LATE_DASH,
    DASH_TURN,
    RUN_BREAK,
    EARLY_RUN_TURN,
    MID_RUN_TURN,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    Jump = 1 << 0,
    Grab = 1 << 1,
    Surf = 1 << 2,
    Advance = 1 << 3,
    Light = 1 << 4,
    Attack = 1 << 5,
    Heavy = 1 << 6,
    Special = 1 << 7,
    Shield = 1 << 8,
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [System.FlagsAttribute()]
  public enum PlatformAxis : int {
    X = 1 << 0,
    Y = 1 << 1,
    Z = 1 << 2,
  }
  public static unsafe partial class PlatformAxis_ext {
    public static Boolean IsFlagSet(this PlatformAxis self, PlatformAxis flag) {
      return (self & flag) == flag;
    }
    public static PlatformAxis SetFlag(this PlatformAxis self, PlatformAxis flag) {
      return self | flag;
    }
    public static PlatformAxis ClearFlag(this PlatformAxis self, PlatformAxis flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public Int32 Length {
      get {
        return 1024;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 128);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 16);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet6* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet6* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet6* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet6* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AnimData))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAnimData : IEquatable<AssetRefAnimData>, IAssetRef<AnimData> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAnimData(AnimData value) {
      var r = default(AssetRefAnimData);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAnimData other && Equals(other);
    }
    public Boolean Equals(AssetRefAnimData other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAnimData a, AssetRefAnimData b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAnimData a, AssetRefAnimData b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAnimData*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(PlatformConfig))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefPlatformConfig : IEquatable<AssetRefPlatformConfig>, IAssetRef<PlatformConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefPlatformConfig(PlatformConfig value) {
      var r = default(AssetRefPlatformConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefPlatformConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefPlatformConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefPlatformConfig a, AssetRefPlatformConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefPlatformConfig a, AssetRefPlatformConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefPlatformConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(PlatformControllerConfig))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefPlatformControllerConfig : IEquatable<AssetRefPlatformControllerConfig>, IAssetRef<PlatformControllerConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefPlatformControllerConfig(PlatformControllerConfig value) {
      var r = default(AssetRefPlatformControllerConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefPlatformControllerConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefPlatformControllerConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefPlatformControllerConfig a, AssetRefPlatformControllerConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefPlatformControllerConfig a, AssetRefPlatformControllerConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefPlatformControllerConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(State))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefState : IEquatable<AssetRefState>, IAssetRef<State> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefState(State value) {
      var r = default(AssetRefState);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefState other && Equals(other);
    }
    public Boolean Equals(AssetRefState other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefState a, AssetRefState b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefState a, AssetRefState b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefState*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(StateSet))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefStateSet : IEquatable<AssetRefStateSet>, IAssetRef<StateSet> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefStateSet(StateSet value) {
      var r = default(AssetRefStateSet);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefStateSet other && Equals(other);
    }
    public Boolean Equals(AssetRefStateSet other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefStateSet a, AssetRefStateSet b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefStateSet a, AssetRefStateSet b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefStateSet*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(attackData))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefattackData : IEquatable<AssetRefattackData>, IAssetRef<attackData> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefattackData(attackData value) {
      var r = default(AssetRefattackData);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefattackData other && Equals(other);
    }
    public Boolean Equals(AssetRefattackData other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefattackData a, AssetRefattackData b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefattackData a, AssetRefattackData b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefattackData*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct FSM {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefState CurrentState;
    [FieldOffset(24)]
    public AssetRefStateSet Moveset;
    [FieldOffset(8)]
    public AssetRefState NextState;
    [FieldOffset(16)]
    public AssetRefState PrevState;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + Moveset.GetHashCode();
        hash = hash * 31 + NextState.GetHashCode();
        hash = hash * 31 + PrevState.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (FSM*)ptr;
        Quantum.AssetRefState.Serialize(&p->CurrentState, serializer);
        Quantum.AssetRefState.Serialize(&p->NextState, serializer);
        Quantum.AssetRefState.Serialize(&p->PrevState, serializer);
        Quantum.AssetRefStateSet.Serialize(&p->Moveset, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 160;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Button Advance;
    [FieldOffset(12)]
    public Button Attack;
    [FieldOffset(112)]
    public FPVector2 Direction;
    [FieldOffset(24)]
    public Button Grab;
    [FieldOffset(36)]
    public Button Heavy;
    [FieldOffset(48)]
    public Button Jump;
    [FieldOffset(128)]
    public FPVector2 LeftStick;
    [FieldOffset(60)]
    public Button Light;
    [FieldOffset(144)]
    public FPVector2 RightStick;
    [FieldOffset(72)]
    public Button Shield;
    [FieldOffset(84)]
    public Button Special;
    [FieldOffset(96)]
    public Button Surf;
    public const int MAX_COUNT = 6;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + Advance.GetHashCode();
        hash = hash * 31 + Attack.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + Grab.GetHashCode();
        hash = hash * 31 + Heavy.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + LeftStick.GetHashCode();
        hash = hash * 31 + Light.GetHashCode();
        hash = hash * 31 + RightStick.GetHashCode();
        hash = hash * 31 + Shield.GetHashCode();
        hash = hash * 31 + Special.GetHashCode();
        hash = hash * 31 + Surf.GetHashCode();
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.Jump: return Jump.IsDown;
        case InputButtons.Grab: return Grab.IsDown;
        case InputButtons.Surf: return Surf.IsDown;
        case InputButtons.Advance: return Advance.IsDown;
        case InputButtons.Light: return Light.IsDown;
        case InputButtons.Attack: return Attack.IsDown;
        case InputButtons.Heavy: return Heavy.IsDown;
        case InputButtons.Special: return Special.IsDown;
        case InputButtons.Shield: return Shield.IsDown;
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.Jump: return Jump.WasPressed;
        case InputButtons.Grab: return Grab.WasPressed;
        case InputButtons.Surf: return Surf.WasPressed;
        case InputButtons.Advance: return Advance.WasPressed;
        case InputButtons.Light: return Light.WasPressed;
        case InputButtons.Attack: return Attack.WasPressed;
        case InputButtons.Heavy: return Heavy.WasPressed;
        case InputButtons.Special: return Special.WasPressed;
        case InputButtons.Shield: return Shield.WasPressed;
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        Button.Serialize(&p->Advance, serializer);
        Button.Serialize(&p->Attack, serializer);
        Button.Serialize(&p->Grab, serializer);
        Button.Serialize(&p->Heavy, serializer);
        Button.Serialize(&p->Jump, serializer);
        Button.Serialize(&p->Light, serializer);
        Button.Serialize(&p->Shield, serializer);
        Button.Serialize(&p->Special, serializer);
        Button.Serialize(&p->Surf, serializer);
        FPVector2.Serialize(&p->Direction, serializer);
        FPVector2.Serialize(&p->LeftStick, serializer);
        FPVector2.Serialize(&p->RightStick, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1472;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public FP DeltaTime;
    [FieldOffset(48)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(0)]
    public AssetRefMap Map;
    [FieldOffset(24)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(1176)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(8)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(32)]
    public RNGSession RngSession;
    [FieldOffset(88)]
    public BitSet1024 Systems;
    [FieldOffset(216)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[960];
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 160, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRefMap.Serialize(&p->Map, serializer);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        FixedArray.Serialize(p->input, serializer, StaticDelegates.SerializeInput);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AbilityEntity : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int16 AnimationFrame;
    [FieldOffset(8)]
    public FSM FSM;
    [FieldOffset(4)]
    public ControllerType controllerType;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + AnimationFrame.GetHashCode();
        hash = hash * 31 + FSM.GetHashCode();
        hash = hash * 31 + (Int32)controllerType;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AbilityEntity*)ptr;
        serializer.Stream.Serialize(&p->AnimationFrame);
        serializer.Stream.Serialize((Int32*)&p->controllerType);
        Quantum.FSM.Serialize(&p->FSM, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Animator : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefAnimData data;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        hash = hash * 31 + data.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Animator*)ptr;
        Quantum.AssetRefAnimData.Serialize(&p->data, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BasicFields : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public InputType inputType;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + (Int32)inputType;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BasicFields*)ptr;
        serializer.Stream.Serialize((Int32*)&p->inputType);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HitboxTree : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefattackData attacks;
    [FieldOffset(0)]
    [FramePrinter.PtrQDictionaryAttribute(typeof(EntityRef), typeof(Int32))]
    private Quantum.Ptr entitiesHitPtr;
    public QDictionaryPtr<EntityRef, Int32> entitiesHit {
      get {
        return new QDictionaryPtr<EntityRef, Int32>(entitiesHitPtr);
      }
      set {
        entitiesHitPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + attacks.GetHashCode();
        hash = hash * 31 + entitiesHitPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      entitiesHitPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (HitboxTree*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HitboxTree*)ptr;
        QDictionary.Serialize(p->entitiesHit, &p->entitiesHitPtr, serializer, StaticDelegates.SerializeEntityRef, StaticDelegates.SerializeInt32);
        Quantum.AssetRefattackData.Serialize(&p->attacks, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HurtboxTree : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 2;
    [FieldOffset(2)]
    private fixed Byte _alignment_padding_[2];
    [FieldOffset(0)]
    public Int16 enabledHurtboxes;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + enabledHurtboxes.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HurtboxTree*)ptr;
        serializer.Stream.Serialize(&p->enabledHurtboxes);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Platform : Quantum.IComponent {
    public const Int32 SIZE = 208;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public QBoolean CanMove;
    [FieldOffset(24)]
    public AssetRefPlatformConfig Config;
    [FieldOffset(72)]
    [ExcludeFromPrototype()]
    public FPVector3 LastMovementCurveEvaluation;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FP LastRotationCurveEvaluation;
    [FieldOffset(96)]
    [ExcludeFromPrototype()]
    public FPVector3 PositionDelta;
    [FieldOffset(120)]
    [ExcludeFromPrototype()]
    public FPVector3 PreviousPosition;
    [FieldOffset(144)]
    [HideInInspector()]
    public FPQuaternion PreviousRotation;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Int32 QueryIndex;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public QBoolean ReverseXMovement;
    [FieldOffset(12)]
    [ExcludeFromPrototype()]
    public QBoolean ReverseYMovement;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public QBoolean ReverseZMovement;
    [FieldOffset(40)]
    [ExcludeFromPrototype()]
    public FP RotationAccumulatedTime;
    [FieldOffset(176)]
    [HideInInspector()]
    public FPQuaternion RotationDelta;
    [FieldOffset(48)]
    [ExcludeFromPrototype()]
    public FP XMovementAccumulatedTime;
    [FieldOffset(56)]
    [ExcludeFromPrototype()]
    public FP YMovementAccumulatedTime;
    [FieldOffset(64)]
    [ExcludeFromPrototype()]
    public FP ZMovementAccumulatedTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + CanMove.GetHashCode();
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + LastMovementCurveEvaluation.GetHashCode();
        hash = hash * 31 + LastRotationCurveEvaluation.GetHashCode();
        hash = hash * 31 + PositionDelta.GetHashCode();
        hash = hash * 31 + PreviousPosition.GetHashCode();
        hash = hash * 31 + PreviousRotation.GetHashCode();
        hash = hash * 31 + QueryIndex.GetHashCode();
        hash = hash * 31 + ReverseXMovement.GetHashCode();
        hash = hash * 31 + ReverseYMovement.GetHashCode();
        hash = hash * 31 + ReverseZMovement.GetHashCode();
        hash = hash * 31 + RotationAccumulatedTime.GetHashCode();
        hash = hash * 31 + RotationDelta.GetHashCode();
        hash = hash * 31 + XMovementAccumulatedTime.GetHashCode();
        hash = hash * 31 + YMovementAccumulatedTime.GetHashCode();
        hash = hash * 31 + ZMovementAccumulatedTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Platform*)ptr;
        serializer.Stream.Serialize(&p->QueryIndex);
        QBoolean.Serialize(&p->CanMove, serializer);
        QBoolean.Serialize(&p->ReverseXMovement, serializer);
        QBoolean.Serialize(&p->ReverseYMovement, serializer);
        QBoolean.Serialize(&p->ReverseZMovement, serializer);
        Quantum.AssetRefPlatformConfig.Serialize(&p->Config, serializer);
        FP.Serialize(&p->LastRotationCurveEvaluation, serializer);
        FP.Serialize(&p->RotationAccumulatedTime, serializer);
        FP.Serialize(&p->XMovementAccumulatedTime, serializer);
        FP.Serialize(&p->YMovementAccumulatedTime, serializer);
        FP.Serialize(&p->ZMovementAccumulatedTime, serializer);
        FPVector3.Serialize(&p->LastMovementCurveEvaluation, serializer);
        FPVector3.Serialize(&p->PositionDelta, serializer);
        FPVector3.Serialize(&p->PreviousPosition, serializer);
        FPQuaternion.Serialize(&p->PreviousRotation, serializer);
        FPQuaternion.Serialize(&p->RotationDelta, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef Player;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 139;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->Player, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerPlatformController : Quantum.IComponent {
    public const Int32 SIZE = 104;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public QBoolean CollidingWithPlatform;
    [FieldOffset(8)]
    public AssetRefPlatformControllerConfig Config;
    [FieldOffset(16)]
    [ExcludeFromPrototype()]
    public EntityRef Entity;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Int32 LastFrameCollided;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    public FPVector3 LastPosition;
    [FieldOffset(48)]
    [ExcludeFromPrototype()]
    public FPVector3 LastVelocity;
    [FieldOffset(72)]
    [HideInInspector()]
    public FPQuaternion PlatformDeltaRotation;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 149;
        hash = hash * 31 + CollidingWithPlatform.GetHashCode();
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + LastFrameCollided.GetHashCode();
        hash = hash * 31 + LastPosition.GetHashCode();
        hash = hash * 31 + LastVelocity.GetHashCode();
        hash = hash * 31 + PlatformDeltaRotation.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerPlatformController*)ptr;
        serializer.Stream.Serialize(&p->LastFrameCollided);
        QBoolean.Serialize(&p->CollidingWithPlatform, serializer);
        Quantum.AssetRefPlatformControllerConfig.Serialize(&p->Config, serializer);
        EntityRef.Serialize(&p->Entity, serializer);
        FPVector3.Serialize(&p->LastPosition, serializer);
        FPVector3.Serialize(&p->LastVelocity, serializer);
        FPQuaternion.Serialize(&p->PlatformDeltaRotation, serializer);
    }
  }
  public unsafe partial class Frame {
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    static partial void InitStaticGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.AbilityEntity>(Quantum.AbilityEntity.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Animator>(Quantum.Animator.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.BasicFields>(Quantum.BasicFields.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.HitboxTree>(Quantum.HitboxTree.Serialize, null, Quantum.HitboxTree.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.HurtboxTree>(Quantum.HurtboxTree.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Platform>(Quantum.Platform.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerPlatformController>(Quantum.PlayerPlatformController.Serialize, null, null, ComponentFlags.None);
      });
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities);
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AbilityEntity>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AbilityEntity>();
      BuildSignalsArrayOnComponentAdded<Quantum.Animator>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Animator>();
      BuildSignalsArrayOnComponentAdded<Quantum.BasicFields>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BasicFields>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.HitboxTree>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HitboxTree>();
      BuildSignalsArrayOnComponentAdded<Quantum.HurtboxTree>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HurtboxTree>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Platform>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Platform>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerPlatformController>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerPlatformController>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->Jump = i->Jump.Update(this.Number, input.Jump);
      i->Direction = input.Direction;
      i->LeftStick = input.LeftStick;
      i->RightStick = input.RightStick;
      i->Grab = i->Grab.Update(this.Number, input.Grab);
      i->Surf = i->Surf.Update(this.Number, input.Surf);
      i->Advance = i->Advance.Update(this.Number, input.Advance);
      i->Light = i->Light.Update(this.Number, input.Light);
      i->Attack = i->Attack.Update(this.Number, input.Attack);
      i->Heavy = i->Heavy.Update(this.Number, input.Heavy);
      i->Special = i->Special.Update(this.Number, input.Special);
      i->Shield = i->Shield.Update(this.Number, input.Shield);
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 0;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
    }
    public unsafe partial struct FrameAssets {
      public AnimData AnimData(AssetRefAnimData assetRef) {
         return _f.FindAsset<AnimData>(assetRef.Id);
      }
      public attackData attackData(AssetRefattackData assetRef) {
         return _f.FindAsset<attackData>(assetRef.Id);
      }
      public StateSet StateSet(AssetRefStateSet assetRef) {
         return _f.FindAsset<StateSet>(assetRef.Id);
      }
      public State State(AssetRefState assetRef) {
         return _f.FindAsset<State>(assetRef.Id);
      }
      public PlatformConfig PlatformConfig(AssetRefPlatformConfig assetRef) {
         return _f.FindAsset<PlatformConfig>(assetRef.Id);
      }
      public PlatformControllerConfig PlatformControllerConfig(AssetRefPlatformControllerConfig assetRef) {
         return _f.FindAsset<PlatformControllerConfig>(assetRef.Id);
      }
    }
  }
  public static unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefAnimData value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefPlatformConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefPlatformControllerConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefState value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefStateSet value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefattackData value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class AnimData : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class attackData : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class StateSet : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class State : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class PlatformConfig : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class PlatformControllerConfig : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.AbilityEntity_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Animator_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.BasicFields_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.HitboxTree_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.HurtboxTree_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Platform_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerLink_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerPlatformController_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
  }
  public static unsafe partial class StaticDelegates {
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeInt32;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitGen() {
      SerializeEntityRef = EntityRef.Serialize;
      SerializeInt32 = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializeInput = Quantum.Input.Serialize;
    }
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(Quantum.AbilityEntity), Quantum.AbilityEntity.SIZE);
      Register(typeof(Quantum.Animator), Quantum.Animator.SIZE);
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(Quantum.AssetRefAnimData), Quantum.AssetRefAnimData.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(Quantum.AssetRefPlatformConfig), Quantum.AssetRefPlatformConfig.SIZE);
      Register(typeof(Quantum.AssetRefPlatformControllerConfig), Quantum.AssetRefPlatformControllerConfig.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(Quantum.AssetRefState), Quantum.AssetRefState.SIZE);
      Register(typeof(Quantum.AssetRefStateSet), Quantum.AssetRefStateSet.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.AssetRefattackData), Quantum.AssetRefattackData.SIZE);
      Register(typeof(Quantum.BasicFields), Quantum.BasicFields.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(Quantum.ControllerType), 4);
      Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPBounds3), FPBounds3.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(Quantum.FSM), Quantum.FSM.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(HingeJoint), HingeJoint.SIZE);
      Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      Register(typeof(Hit), Hit.SIZE);
      Register(typeof(Hit3D), Hit3D.SIZE);
      Register(typeof(Quantum.HitboxTree), Quantum.HitboxTree.SIZE);
      Register(typeof(Quantum.HurtboxTree), Quantum.HurtboxTree.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(Quantum.InputType), 4);
      Register(typeof(Joint), Joint.SIZE);
      Register(typeof(Joint3D), Joint3D.SIZE);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(Quantum.Platform), Quantum.Platform.SIZE);
      Register(typeof(Quantum.PlatformAxis), 4);
      Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      Register(typeof(Quantum.PlayerPlatformController), Quantum.PlayerPlatformController.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Shape2D), Shape2D.SIZE);
      Register(typeof(Shape3D), Shape3D.SIZE);
      Register(typeof(SpringJoint), SpringJoint.SIZE);
      Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAnimData>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefPlatformConfig>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefPlatformControllerConfig>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefStateSet>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefattackData>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ControllerType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlatformAxis>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  [System.SerializableAttribute()]
  [Prototype(typeof(ControllerType))]
  public unsafe partial struct ControllerType_Prototype {
    public Int32 Value;
    public static implicit operator ControllerType(ControllerType_Prototype value) {
        return (ControllerType)value.Value;
    }
    public static implicit operator ControllerType_Prototype(ControllerType value) {
        return new ControllerType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputType))]
  public unsafe partial struct InputType_Prototype {
    public Int32 Value;
    public static implicit operator InputType(InputType_Prototype value) {
        return (InputType)value.Value;
    }
    public static implicit operator InputType_Prototype(InputType value) {
        return new InputType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlatformAxis))]
  public unsafe partial struct PlatformAxis_Prototype {
    public Int32 Value;
    public static implicit operator PlatformAxis(PlatformAxis_Prototype value) {
        return (PlatformAxis)value.Value;
    }
    public static implicit operator PlatformAxis_Prototype(PlatformAxis value) {
        return new PlatformAxis_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(KeyValuePair<EntityRef, Int32>))]
  public unsafe partial class DictionaryEntry_EntityRef_Int32_Prototype : DictionaryEntryPrototype {
    public MapEntityId Key;
    public Int32 Value;
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AbilityEntity))]
  public sealed unsafe partial class AbilityEntity_Prototype : ComponentPrototype<AbilityEntity> {
    public FSM_Prototype FSM;
    public Int16 AnimationFrame;
    public ControllerType_Prototype controllerType;
    partial void MaterializeUser(Frame frame, ref AbilityEntity result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AbilityEntity component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AbilityEntity result, in PrototypeMaterializationContext context) {
      result.AnimationFrame = this.AnimationFrame;
      this.FSM.Materialize(frame, ref result.FSM, in context);
      result.controllerType = this.controllerType;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Animator))]
  public sealed unsafe partial class Animator_Prototype : ComponentPrototype<Animator> {
    public AssetRefAnimData data;
    partial void MaterializeUser(Frame frame, ref Animator result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Animator component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Animator result, in PrototypeMaterializationContext context) {
      result.data = this.data;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BasicFields))]
  public sealed unsafe partial class BasicFields_Prototype : ComponentPrototype<BasicFields> {
    public InputType_Prototype inputType;
    partial void MaterializeUser(Frame frame, ref BasicFields result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      BasicFields component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref BasicFields result, in PrototypeMaterializationContext context) {
      result.inputType = this.inputType;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(FSM))]
  public sealed unsafe partial class FSM_Prototype : StructPrototype {
    public AssetRefStateSet Moveset;
    public AssetRefState CurrentState;
    public AssetRefState PrevState;
    public AssetRefState NextState;
    partial void MaterializeUser(Frame frame, ref FSM result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref FSM result, in PrototypeMaterializationContext context) {
      result.CurrentState = this.CurrentState;
      result.Moveset = this.Moveset;
      result.NextState = this.NextState;
      result.PrevState = this.PrevState;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HitboxTree))]
  public sealed unsafe partial class HitboxTree_Prototype : ComponentPrototype<HitboxTree> {
    public AssetRefattackData attacks;
    [DictionaryAttribute()]
    [DynamicCollectionAttribute()]
    public DictionaryEntry_EntityRef_Int32_Prototype[] entitiesHit = {};
    partial void MaterializeUser(Frame frame, ref HitboxTree result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      HitboxTree component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref HitboxTree result, in PrototypeMaterializationContext context) {
      result.attacks = this.attacks;
      if (this.entitiesHit.Length == 0) {
        result.entitiesHit = default;
      } else {
        var dict = frame.AllocateDictionary(result.entitiesHit, this.entitiesHit.Length);
        for (int i = 0; i < this.entitiesHit.Length; ++i) {
          EntityRef tmpKey = default;
          Int32 tmpValue = default;
          PrototypeValidator.FindMapEntity(this.entitiesHit[i].Key, in context, out tmpKey);
          tmpValue = this.entitiesHit[i].Value;
          PrototypeValidator.AddToDictionary(dict, tmpKey, tmpValue, in context);
        }
        result.entitiesHit = dict;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HurtboxTree))]
  public sealed unsafe partial class HurtboxTree_Prototype : ComponentPrototype<HurtboxTree> {
    public Int16 enabledHurtboxes;
    partial void MaterializeUser(Frame frame, ref HurtboxTree result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      HurtboxTree component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref HurtboxTree result, in PrototypeMaterializationContext context) {
      result.enabledHurtboxes = this.enabledHurtboxes;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Input))]
  public sealed unsafe partial class Input_Prototype : StructPrototype {
    public Button Jump;
    public FPVector2 Direction;
    public FPVector2 LeftStick;
    public FPVector2 RightStick;
    public Button Grab;
    public Button Surf;
    public Button Advance;
    public Button Light;
    public Button Attack;
    public Button Heavy;
    public Button Special;
    public Button Shield;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      result.Advance = this.Advance;
      result.Attack = this.Attack;
      result.Direction = this.Direction;
      result.Grab = this.Grab;
      result.Heavy = this.Heavy;
      result.Jump = this.Jump;
      result.LeftStick = this.LeftStick;
      result.Light = this.Light;
      result.RightStick = this.RightStick;
      result.Shield = this.Shield;
      result.Special = this.Special;
      result.Surf = this.Surf;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Platform))]
  public sealed unsafe partial class Platform_Prototype : ComponentPrototype<Platform> {
    public AssetRefPlatformConfig Config;
    [DegreesAttribute()]
    [HideInInspector()]
    public FPVector3 PreviousRotation;
    [DegreesAttribute()]
    [HideInInspector()]
    public FPVector3 RotationDelta;
    partial void MaterializeUser(Frame frame, ref Platform result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Platform component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Platform result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      result.PreviousRotation = FPQuaternion.Euler(this.PreviousRotation);
      result.RotationDelta = FPQuaternion.Euler(this.RotationDelta);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerLink))]
  public sealed unsafe partial class PlayerLink_Prototype : ComponentPrototype<PlayerLink> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerLink component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context) {
      result.Player = this.Player;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerPlatformController))]
  public sealed unsafe partial class PlayerPlatformController_Prototype : ComponentPrototype<PlayerPlatformController> {
    public AssetRefPlatformControllerConfig Config;
    [DegreesAttribute()]
    [HideInInspector()]
    public FPVector3 PlatformDeltaRotation;
    partial void MaterializeUser(Frame frame, ref PlayerPlatformController result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerPlatformController component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerPlatformController result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      result.PlatformDeltaRotation = FPQuaternion.Euler(this.PlatformDeltaRotation);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [ArrayLength(0, 1)]
    public List<Prototypes.AbilityEntity_Prototype> AbilityEntity;
    [ArrayLength(0, 1)]
    public List<Prototypes.Animator_Prototype> Animator;
    [ArrayLength(0, 1)]
    public List<Prototypes.BasicFields_Prototype> BasicFields;
    [ArrayLength(0, 1)]
    public List<Prototypes.HitboxTree_Prototype> HitboxTree;
    [ArrayLength(0, 1)]
    public List<Prototypes.HurtboxTree_Prototype> HurtboxTree;
    [ArrayLength(0, 1)]
    public List<Prototypes.Platform_Prototype> Platform;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerLink_Prototype> PlayerLink;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerPlatformController_Prototype> PlayerPlatformController;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(AbilityEntity, target);
      Collect(Animator, target);
      Collect(BasicFields, target);
      Collect(HitboxTree, target);
      Collect(HurtboxTree, target);
      Collect(Platform, target);
      Collect(PlayerLink, target);
      Collect(PlayerPlatformController, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.AbilityEntity_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AbilityEntity);
      }
      public override void Visit(Prototypes.Animator_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Animator);
      }
      public override void Visit(Prototypes.BasicFields_Prototype prototype) {
        Storage.Store(prototype, ref Storage.BasicFields);
      }
      public override void Visit(Prototypes.HitboxTree_Prototype prototype) {
        Storage.Store(prototype, ref Storage.HitboxTree);
      }
      public override void Visit(Prototypes.HurtboxTree_Prototype prototype) {
        Storage.Store(prototype, ref Storage.HurtboxTree);
      }
      public override void Visit(Prototypes.Platform_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Platform);
      }
      public override void Visit(Prototypes.PlayerLink_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerLink);
      }
      public override void Visit(Prototypes.PlayerPlatformController_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerPlatformController);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
